# include <stdio.h>

/*void (f)
{
  printf("哈哈\n"); //这个函数不规范，因为没有return；
}
*/
void f(void); //函数声明，分号不能丢
//和declare int i 一样
int main (void)
{
  return 0;
}

void (f)
{
  printf("哈哈\n"); //这个函数不规范，因为没有return；
} //但是如果这个f放在这里，那么系统会报错，因为他不知道f是个嘛

1. 顺序的重要性
   - 函数调用要在定义函数的前面，不然不能调用。但是你可以有个声明！
    ex: void f(void);
       ...
        f();
        void f(void)
        {
        ...
          }
  2. 重复调用
  #include <stdio.h>
  //void f(void);
  void g(void)
  {
    f();        //这里是会报错的，调用在定义前面，系统是找不到f()在哪里的，
               //所以一定要写一个声明
  }
  void f(void)
  {
  printf("haha\n");
  }
  int main (void)
  {
     g();
     return 0;
  }
  
  
 3. 注意问题
    函数调用和函数定义的顺序：
            - 如果函数调用写在了函数定义的前面，则必须加函数前置声明
            - 函数前置声明的作用：
                 1. 告诉编译器即将出现的若干个字母代表的是一个函数
                 2. 告诉编译器即将出现的若干个字母所代表的函数的形参和返回值的具体情况 
                 3. 函数声明是一个语句，必须要加分号
                 4. 对库函数的声明是通过 # include <库函数所在文件名字.h>
                 
