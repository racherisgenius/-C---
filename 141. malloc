1. 动态内存分配： 动态数组的构造
（Malloc函数使用）
/*
malloc是memory allocate 的缩写

*/
#include <stdio.h>
#include <malloc.h> //不能省略
//
int main(void)
{
    int i = 5; //分配了4个字节， 静态分配
    int * p = (int *) malloc(4); //向内存申请了4个字节的空间，但实际上有8个字节的空间
    //这个语句表示这里分配了8个字节，p变量占了4个字节，p指向的内存也占了4个字节
    /*
    1.要使用malloc函数的话，一定要申请malloc package
    不论type是什么，只要用了malloc的话，他的内存大小一定是4个字节
    2. malloc函数的形参只有一个形参且是个整数类型
    3. （4）表示请求系统给4个字节的空间
    4. malloc函数只能返回第一个字节的地址
    5. （int *）表示了一个强制转换，可以告诉我们这个变量的大小。之后再确定其大小
    6. p本身的内存是静态的，而p所指向的内存是动态的
    */
    *p = 5; //*p代表的就是一个int 变量，只不过*p这个整型变量的内存分配方式和i变量的内存分配方式是不同扥额
    free（p）;
    //释放了p所指向的内存空间。p本身是静态的，所以系统会自动释放。
    //但是这种动态的是需要我们手动释放
    return 0;
}
