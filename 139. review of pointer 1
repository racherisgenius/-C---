1. 传统数组的缺点：
  1）数组长度必须事先指定，且只能是常整数，不能是变量
  2）传统定义的数组，程序远无法手动释放内从空间
    *只给在function 结束后才可以被系统自动释放
  3） length无法自由的缩小增大
  4） A函数定义的数组，在A函数运行期间可以被其他函数使用。
      但A函数运行完毕之后，A函数中的数组将无法被其他函数使用
      *传统方式定义的数组不能跨函数使用
      ex:
      #include <stdio.h>
      void g(int * pArr, int len)
      {
        pArr[2] = 88; //内部对pArr处理，而因为pArr get到的是a的这个数组，所以这里的操作是对a的操作
        //pArr[2] == a[2] 
      }
      void f(void)
      {
         int a[5] = {1,2,3,4,5};
         g(a, 5); //把信息给g，之后让g对f的数组进行处理
         printf("%d\n", a[2]);
      }
      /*
      要注意，当f终止的时候，f里面的数组是不能被别的函数所使用的因为f函数里面的使用空间被释放了。
      f一旦终止，空间释放
      */
      int main(void)
      {
        return 0;
      }
  *动态和静态的区别*
   - 只要有malloc的都是动态的
